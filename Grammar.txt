IDENTIFIER:
	primary_expression;
	enumerator:
		-> brak
		-> '=' conditional_expression
	direct_declarator;
	identifier_list;
	labeled_statement:
		-> ':' statement
	
CONSTANT:
	primary_expression;
	
STRING_LITERAL:
	primary_expression;
	
INC_OP:
	unary_expression:
		-> unary_expression
		
DEC_OP:
	unary_expression:
		-> unary_expression

MUL_ASSIGN:
	assignment_operator;
	
DIV_ASSIGN:
	assignment_operator;
	
MOD_ASSIGN:
	assignment_operator;
	
ADD_ASSIGN:
	assignment_operator;
	
SUB_ASSIGN:
	assignment_operator;
	
TYPEDEF:
	declaration_specifiers:
		-> brak
		-> declaration_specifiers
		
CHAR:
	type_specifier;

SHORT:
	type_specifier;

INT:
	type_specifier;

LONG:
	type_specifier;

SIGNED:
	type_specifier;

UNSIGNED:
	type_specifier;

FLOAT:
	type_specifier;

DOUBLE:
	type_specifier;

VOID:
	type_specifier;

STRUCT:
	struct_or_union_specifier:
		-> IDENTIFIER '{' struct_declaration_list '}'
		-> '{' struct_declaration_list '}'
		-> IDENTIFIER

ENUM:
	enum_specifier:
		-> '{' enumerator_list '}'
		-> IDENTIFIER '{' enumerator_list '}'
		-> IDENTIFIER

CASE:
	labeled_statement:
		-> conditional_expression ':' statement

DEFAULT:
	labeled_statement:
		-> ':' statement

IF:
	selection_statement:
		-> '(' expression ')' statement
		-> '(' expression ')' statement ELSE statement

SWITCH:
	selection_statement:
		-> '(' expression ')' statement

WHILE:
	iteration_statement:
		-> '(' expression ')' statement

DO:
	iteration_statement:
		-> statement WHILE '(' expression ')' statement
		
FOR:
	iteration_statement:
		-> '(' expression_statement expression_statement ')' statement
		-> '(' expression_statement expression_statement expression ')' statement

BREAK:
	jump_statement:
		-> ';'

RETURN:
	jump_statement:
		-> ';'
		-> expression ';'

'(':
	primary_expression:
		-> expression ')'
	cast_expression:
		-> type_name ')' cast_expression
	direct_declarator:
		-> direct_declarator ')'
	direct_abstract_declarator:
		-> direct_abstract_declarator ')'
		-> ')'
		-> parameter_list ')'
		
'*':
	unary_operator;
	
'+':
	unary_operator;
	
'-':
	unary_operator;
	
'!':
	unary_operator;
	
'=':
	assignment_operator;
	
':':
	struct_declarator:
		-> conditional_expression

'[':
	direct_abstract_declarator:
		-> ']'
		-> conditional_expression ']'

'{':
	initializer:
		-> initializer_list '}'
		-> initializer_list ',' '}'
	compound_statement:
		-> '}'
		-> statement_list '}'
		-> declaration_list '}'
		-> declaration_list statement_list '}'

';':
	expression_statement;

primary_expression:
	postfix_expression;
	
postfix_expression:
	postfix_expression:
		-> '[' expression ']'
		-> '('')'
		-> '(' argument_expression_list ')'
		-> '.' IDENTIFIER
		-> INC_OP
		-> DEC_OP
	unary_expression;
		
argument_expression_list:
	argument_expression_list:
		-> ',' assignment_expression
		
unary_expression:
	cast_expression;
	assignment_expression:
		-> assignment_operator assignment_expression
	
unary_operator:
	unary_expression:
		-> cast_expression

cast_expression:
	multiplicative_expression;
	
multiplicative_expression:
	multiplicative_expression:
		-> '*' cast_expression
		-> '/' cast_expression
		-> '%' cast_expression
	additive_expression;
		
additive_expression:
	additive_expression:
		-> '+' multiplicative_expression
		-> '-' multiplicative_expression
	relational_expression;
	
relational_expression:
	relational_expression:
		-> '<' additive_expression
		-> '>' additive_expression
		-> LE_OP additive_expression
		-> GE_OP additive_expression
	equality_expression;
	
equality_expression:
	equality_expression:
		-> EQ_OP relational_expression
		-> NE_OP relational_expression
	logical_and_expression;
		
logical_and_expression:
	logical_and_expression:
		-> AND_OP equality_expression
	logical_or_expression;
	
logical_or_expression:
	logical_or_expression:
		-> OR_OP logical_and_expression
	conditional_expression:
		-> brak
		-> '?' expression ':' conditional_expression
	
conditional_expression:
	assignment_expression;
	
assignment_expression:
	argument_expression_list;
	expression;
	initializer;

expression:
	expression:
		-> ',' assignment_expression
	expression_statement:
		-> ';'
		
declaration:
	declaration_list;
	external_declaration;

declaration_specifiers:
	declaration:
		-> ';'
		-> init_declarator_list ';'
	parameter_declaration:
		-> direct_declarator
		-> direct_abstract_declarator
		-> brak
	function_definition:
		-> direct_declarator declaration_list compound_statement
		-> direct_declarator compound_statement
		
init_declarator_list:
	init_declarator_list:
		-> ',' init_declarator

init_declarator:
	init_declarator_list;

type_specifier:
	declaration_specifiers:
		-> brak
		-> declaration_specifiers
	specifier_qualifier_list:
		-> brak
		-> specifier_qualifier_list

struct_or_union_specifier:
	type_specifier;

struct_declaration_list:
	struct_declaration_list:
		-> specifier_qualifier_list struct_declarator_list ';'

specifier_qualifier_list:
	struct_declaration_list:
		-> struct_declarator_list ';'
	type_name:
		-> brak
		-> direct_abstract_declarator

struct_declarator_list
	struct_declarator_list:
		-> ',' struct_declarator

struct_declarator:
	struct_declarator_list;

enum_specifier:
	type_specifier;

enumerator_list:
	enumerator_list:
		-> ',' enumerator

enumerator:
	enumerator_list;

direct_declarator:
	init_declarator:
		-> brak
		-> '=' initializer
	struct_declarator:
		-> brak
		-> ':' conditional_expression
	direct_declarator:
		-> '[' conditional_expression ']'
		-> '['']'
		-> '(' parameter_list ')'
		-> '(' identifier_list ')'
		-> '('')'
	function_definition:
		-> declaration_list compound_statement
		-> compound_statement

parameter_list:
	parameter_list:
		-> ',' parameter_declaration

parameter_declaration:
	parameter_list;

identifier_list:
	identifier_list:
		-> ',' IDENTIFIER

direct_abstract_declarator:
	direct_abstract_declarator:
		-> '['']'
		-> '[' conditional_expression ']'
		-> '('')'
		-> '(' parameter_list ')'

initializer:
	initializer_list;

initializer_list:
	initializer_list:
		-> ',' initializer

statement:
	statement_list;

labeled_statement:
	statement;

compound_statement:
	statement;

declaration_list:
	declaration_list:
		-> declaration

statement_list:
	statement_list:
		-> statement

expression_statement:
	statement;

selection_statement:
	statement;

iteration_statement:
	statement;

jump_statement:
	statement;

translation_unit:
	translation_unit:
		-> external_declaration

external_declaration:
	translation_unit;

function_definition:
	external_declaration;
